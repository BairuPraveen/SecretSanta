% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_signalp.R
\name{parse_signalp}
\alias{parse_signalp}
\title{convert output of Signalp-2.0 and Signalp-3.0 to Signalp-4.0++ format}
\usage{
parse_signalp(input, input_type = c("path", "system_call"), method = c("nn",
  "hmm"), pred_filter = "Signal peptide", version = c(2, 3),
  source_fasta = NULL)
}
\arguments{
\item{input}{output of the command line tools \code{signalp2} or \code{signalp3}/}

\item{input_type}{a character string with the following options:
\itemize{
\item \code{input_type = "path"}  - path to a file with text output from \code{signalp2}
or \code{signalp3}
\item \code{input_type = "system_call"} - output from the \code{signalp2}
or \code{signalp3} system call
}}

\item{method}{which prediction method to use. Options are:
\itemize{
\item \code{method = "hmm"} - for HMM-based predictions
\item \code{method = "nn"} - for prediction based on neural networks
}}

\item{pred_filter}{filter for the type of prediction. Options are:
\itemize{
\item \code{pred_filter = "Signal peptide"}
\item \code{pred_filter = "Signal anchor"}
\item \code{pred_filter = "Non-secretory protein"}
\item \code{pred_filter = "all"} - in case all three filter options shall be included
}}

\item{version}{version of SignalP used: 2.0 or 3.0}

\item{source_fasta}{source fasta file, required to rescue names when signalp2, nn method is used}
}
\value{
parsed \code{signalp2}
or \code{signalp3} output, organised in a \code{\link[tibble]{tibble}} object.
}
\description{
This function parses the output of the command line tools \code{signalp2} and \code{signalp3} to standardize outputs for data analysis.\cr
\cr
Alternatively, \code{parse_signalp} can be called independently on outputs of
\code{signalp2} and \code{signalp3} and captured in a system call or stored in a file.
}
\examples{
# Example 1: parse signalp2 output, stored in a file:
s_path <- system.file("extdata", "sample_prot_sp2_hmm_out",
package = "SecretSanta")
parse_signalp(input = s_path, input_type = "path", pred_filter = "Signal peptide", version = 3, method = 'hmm')

# alternatively users can select for all prediction filters
parse_signalp(input = s_path, input_type = "path", pred_filter = "all", method = 'hmm', version = 2)

# Example2: parse signalp2 output
# captured in a system call. Note, here we assume that
# signalp2 is accessible via $PATH.
s_fasta <- system.file("extdata", "small_prot.fasta",
package = "SecretSanta")
# capture system call:
con_hmm <- system(paste('signalp2 -t euk -f short -m hmm -trunc 70', s_fasta), intern = TRUE)
con_nn <- system(paste('signalp3 -t euk -f short -m nn -trunc 70', s_fasta), intern = TRUE)
# parse captured system call:
parse_signalp(input = con_hmm, input_type = "system_call", method = 'hmm', version = 2)
parse_signalp(input = con_nn, input_type = "system_call",
method = 'nn', version = 3, pred_filter = 'all')
}
\seealso{
\code{\link{signalp}}
}
