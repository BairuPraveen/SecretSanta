% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_signalp.R
\name{signalp}
\alias{signalp}
\title{signalp function}
\usage{
signalp(input_obj, version, organism_type, run_mode, paths)
}
\arguments{
\item{version}{signalp version to run, supported versions:
\itemize{
\item 2
\item 3
\item 4
\item 4.1
}}

\item{organism_type}{possible values: 
\itemize{
\item euk - for eukaryotes;
\item gram+ - for gram-positive bacteria;
\item gram- - for gram-negative bacteria;
}}

\item{run_mode}{\itemize{
\item starter - if it is the first step in pipeline;
\item piper - if you run this function on the output of other CBS tools;
}}

\item{paths}{tibble with paths to external dependencies, generated with \code{\link{manage_paths}} function}

\item{input_object}{an instance of CBSResult class containing protein sequences as on of the attributes}
}
\value{
an object of SignalpResult class
}
\description{
This function calls local signalp to predict the presence and location of signal peptide cleavage sites in amino acid sequences.
}
\examples{
Example pipe would loook like this:

# set paths for external dependencies with manage_paths()
my_pa <- manage_paths(system.file("extdata", "sample_paths", package = "SecretSanta"))

# initialise SignalpResult object
inp <- SignalpResult()

# read fasta file in AAStringSet object
aa <- readAAStringSet(system.file("extdata", "small_prot.fasta", package = "SecretSanta"), use.names = TRUE)

# assign this object to the input_fasta slot of SignalpResult object
inp <- setInfasta(inp, aa)

# run signalp2 on the initial file:
step1_sp2 <- signalp(inp, version = 2, 'euk', run_mode = "starter", paths = my_pa)

# run signalp3 on the result object, will automatically pass out_fasta slot to signalp3:
step2_sp3 <- signalp(step1_sp2, version = 3, 'euk', run_mode = "piper", paths = my_pa)

# run signalp4 on the result object, will automatically pass out_fasta slot to signalp4:
step3_sp4 <- signalp(step2_sp3, version = 4, 'euk', run_mode = "piper", paths = my_pa)
}
