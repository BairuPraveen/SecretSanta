% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signalp_parallel.R
\name{signalp}
\alias{signalp}
\title{signalp function}
\usage{
signalp(input_obj, version, organism_type, run_mode, paths, truncate = NULL)
}
\arguments{
\item{input_obj}{an instance of CBSResult class containing protein sequences as on of the attributes}

\item{version}{signalp version to run, supported versions:
\itemize{
\item 2
\item 3
\item 4
\item 4.1
}}

\item{organism_type}{possible values: 
\itemize{
\item euk - for eukaryotes;
\item gram+ - for gram-positive bacteria;
\item gram- - for gram-negative bacteria;
}}

\item{run_mode}{\itemize{
\item starter - if it is the first step in pipeline;
\item piper - if you run this function on the output of other CBS tools;
}}

\item{paths}{tibble with paths to external dependencies, generated with \code{\link{manage_paths}} function}

\item{truncate}{logical, if TRUE - sequences longer 2000 residues will be truncated to this length limit and renamed. If FALSE - long sequences will be excluded from the analysis. Default = TRUE.}
}
\value{
an object of SignalpResult class
}
\description{
This function calls local signalp to predict the presence and location of signal peptide cleavage sites in amino acid sequences; automatically splits large input files (>500 sequnces) and runs signalp prediction as an embarassingly parallel process on all the CPUs available.
}
\examples{

#Example pipe would loook like this:

# set paths for external dependencies with manage_paths()
my_pa <- manage_paths(system.file("extdata",
                                  "sample_paths",
                                  package = "SecretSanta"
                                  ))

# read fasta file in AAStringSet object
aa <- readAAStringSet(system.file("extdata",
                                  "sample_prot_100.fasta",
                                  package = "SecretSanta"
                                  ))

# assign this object to the input_fasta slot of empty CBSResult object
inp <- CBSResult(in_fasta = aa[1:10])

# run signalp2 on the initial file:
step1_sp2 <- signalp(inp,
                     version = 2,
                     'euk', 
                     run_mode = "starter",
                     paths = my_pa)

# run signalp3 on the result object, will automatically pass out_fasta slot to signalp3:
step2_sp3 <- signalp(step1_sp2,
                     version = 3,
                     'euk',
                     run_mode = "piper",
                     paths = my_pa)

# run signalp4 on the result object, will automatically pass out_fasta slot to signalp4:
step3_sp4 <- signalp(step2_sp3,
                     version = 4,
                     'euk',
                     run_mode = "piper",
                     paths = my_pa)
}
