% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signalp_parallel.R
\name{signalp}
\alias{signalp}
\title{signalp function}
\usage{
signalp(input_obj, version, organism = c("euk", "gram+", "gram-"),
  run_mode = c("starter", "piper"), sp_paths, truncate = NULL,
  cores = NULL)
}
\arguments{
\item{input_obj}{an instance of CBSResult class containing protein 
sequences as one of the attributes}

\item{version}{signalp version to run, supported versions include: \cr
2, 3, 4.}

\item{organism}{\strong{euk} - for eukaryotes;\cr
\strong{gram+} - for gram-positive bacteria;\cr
\strong{gram-} - for gram-negative bacteria;\cr}

\item{run_mode}{\strong{starter} - if it is the first step in pipeline;\cr
\strong{piper} - if you run this function on the output of other CBS tools;}

\item{sp_paths}{if required version of signalp is not acessible globally,
full path to it's exectutble should be provided.
 \code{\link{manage_paths}} function}

\item{truncate}{if \strong{TRUE} - sequences longer 2000 residues will be 
truncated to this length limit and renamed;\cr
if \strong{FALSE} - long sequences will be excluded from the analysis;\cr
Default = TRUE.}

\item{cores}{optional argument, number of cores to run the parallel process
on. If not set default will be 1.}
}
\value{
an object of SignalpResult class
}
\description{
This function calls local signalp to predict the presence and location of
signal peptide cleavage sites in amino acid sequences.
\cr
\cr
Large input files (>500 sequnces) are automatically split into smaller chunks
so that signalp prediction could be run as an embarassingly parallel process
on all the CPUs available.
}
\examples{

#Example pipe would loook like this:

# set paths for external dependencies with manage_paths()
my_pa <- manage_paths(system.file("extdata",
                                  "sample_paths",
                                  package = "SecretSanta"
                                  ))

# read fasta file in AAStringSet object
aa <- readAAStringSet(system.file("extdata",
                                  "sample_prot_100.fasta",
                                  package = "SecretSanta"
                                  ))

# assign this object to the input_fasta slot of empty CBSResult object
inp <- CBSResult(in_fasta = aa[1:10])

# run signalp2 on the initial file:
step1_sp2 <- signalp(inp,
                     version = 2,
                     'euk', 
                     run_mode = "starter",
                     paths = my_pa)

# run signalp3 on the result object, will automatically pass out_fasta slot
# to signalp3:
step2_sp3 <- signalp(step1_sp2,
                     version = 3,
                     'euk',
                     run_mode = "piper",
                     paths = my_pa)

# run signalp4 on the result object, will automatically pass out_fasta slot
# to signalp4:
step3_sp4 <- signalp(step2_sp3,
                     version = 4,
                     'euk',
                     run_mode = "piper",
                     paths = my_pa)
}
