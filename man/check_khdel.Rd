% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_khdel.R
\name{check_khdel}
\alias{check_khdel}
\title{check_khdel function}
\usage{
check_khdel(input_obj, run_mode = c("starter", "piper"))
}
\arguments{
\item{input_obj}{input object of CBSResult class}

\item{run_mode}{\strong{starter} - if it is the first step in a pipeline;
\strong{piper} - if you run this function on the output of other CBS tools;}
}
\value{
ErResult object
}
\description{
This function checks the presence of terminal \strong{KDEL/HDEL} motifs in 
the provided amino acid equences.
}
\examples{
# check ER retention signals in CBSResult object
# before running signalp or any other
# predictions:
aa <- readAAStringSet(system.file("extdata", "sample_prot_100.fasta",
     package = "SecretSanta"))
inp <- SignalpResult(in_fasta = aa[1:10])
et_s <- check_khdel(inp,
    run_mode = 'starter')

# generate signalp predictions:
step1_sp2 <- signalp(et_s, version = 4, organism = 'euk', 
    run_mode = 'starter')
# check ER retention signal in the signalp output, 
# 'starter' mode 
# (will process the in_fasta slot)
et_sp <- check_khdel(step1_sp2, run_mode = 'starter')

# check ER retention signal in the signalp output,
# 'piper' mode:
# (will process the out_fasta slot)
et_piper <- check_khdel(step1_sp2, run_mode = 'piper')
}
