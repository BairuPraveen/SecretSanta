% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/m_slicer.R
\name{m_slicer}
\alias{m_slicer}
\title{m_slicer function}
\usage{
m_slicer(input_obj, min_len, run_mode = c("slice", "rescue"))
}
\arguments{
\item{input_obj}{an instance of CBSResult class or AAStringSet
class containing protein sequences as on of the attributes}

\item{min_len}{sliced sequences below this threshold will be
discarded}

\item{run_mode}{\strong{slice} - to just slice input fasta, regardless
 of it's origin; \cr
\strong{rescue} - to get proteins not predicted to be secreted on the 
 initial run, generate slices;}
}
\value{
a set of sliced sequences, AAStringSet object
}
\description{
NB: this is an \strong{experimental option}.\cr
\cr
This function generates all possible subsequences starting with methionines
(M). This might be usefull when translation start sites assumed to be
mis-predicted for some of the provided proteins. For example, in cases when
the set is obtained after de novo genome or transcriptome assembly.
\cr
\cr
Output of this step can be used as an input for secretome prediction
pipeline to rescue secreted proteins with potentially mis-predicted start
sites. Please proceed with caution.
}
\examples{
# Example 1: generate proteins with alterative translation start site for
# AAStringSet object
aa <- readAAStringSet(system.file("extdata",
                                  "small_prot.fasta",
                                   package = "SecretSanta"))
m_slicer(aa, 100, run_mode = 'slice')
# Example 2: generate proteins with alterative translation start site for
# CBSResult object
my_pa <- manage_paths(system.file("extdata",
                                  "sample_paths",
                                   package = "SecretSanta"))
inp <- SignalpResult()
inp <- setInfasta(inp, aa)
s1_sp2 <- signalp(inp,
                  version = 2,
                  'euk',
                  run_mode = "starter",
                  paths = my_pa)
slices <- m_slicer(s1_sp2,
                   length_threshold = 100,
                   run_mode = 'rescue')
inp_slices <- CBSResult(in_fasta = slices)
s2_sp2_rescue <- signalp(inp_slices,
                         version = 2,
                         'euk',
                         run_mode = 'starter',
                         paths = my_pa)
}
